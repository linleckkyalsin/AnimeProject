{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\anime\\\\src\\\\component\\\\store\\\\AnimeProvider.js\",\n    _s = $RefreshSig$();\n\nimport { React, useReducer } from 'react';\nimport AnimeContext from './context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultState = {\n  items: {}\n};\n\nconst animeReducer = (state, action) => {\n  if (action.type === 'Watch') {\n    console.log(state.items.anime); // const findAnimeIndex=state.items.findIndex((item)=>item.id===action.item.id)\n    // const findAnime=state.items[findAnimeIndex];\n    // let updatedAnime;\n    // if(findAnime){\n    //     let sameAnimes={...findAnime};\n    //     updatedAnime=[...state.items];\n    //     updatedAnime[findAnimeIndex]=sameAnimes;\n    // }\n    // else{\n    //     updatedAnime=state.items.concat(action.item)\n    // }\n    // return{\n    //     items:updatedAnime\n    // }\n    // console.log(action.item.name)\n  }\n\n  return defaultState;\n};\n\nexport default function AnimeProvider(props) {\n  _s();\n\n  const [animeState, dispatchAnime] = useReducer(animeReducer, defaultState);\n\n  const watchHandler = item => {\n    dispatchAnime({\n      type: 'Watch',\n      item: item\n    });\n  }; // console.log(animeState.items)\n\n\n  const MyAnimeContext = {\n    items: animeState.items,\n    addItem: watchHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AnimeContext.Provider, {\n    value: MyAnimeContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AnimeProvider, \"rZLHmuuc4/pOLYPMuZhojaKPEfk=\");\n\n_c = AnimeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimeProvider\");","map":{"version":3,"sources":["C:/Users/LENOVO/Documents/anime/src/component/store/AnimeProvider.js"],"names":["React","useReducer","AnimeContext","defaultState","items","animeReducer","state","action","type","console","log","anime","AnimeProvider","props","animeState","dispatchAnime","watchHandler","item","MyAnimeContext","addItem","children"],"mappings":";;;AAAA,SAAQA,KAAR,EAAcC,UAAd,QAA+B,OAA/B;AACA,OAAOC,YAAP,MAAyB,WAAzB;;AACA,MAAMC,YAAY,GAAC;AACfC,EAAAA,KAAK,EAAC;AADS,CAAnB;;AAKA,MAAMC,YAAY,GAAC,CAACC,KAAD,EAAOC,MAAP,KAAgB;AAC/B,MAAGA,MAAM,CAACC,IAAP,KAAc,OAAjB,EAAyB;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACF,KAAN,CAAYO,KAAxB,EADqB,CAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AACD,SAAOR,YAAP;AACH,CApBD;;AAqBA,eAAe,SAASS,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AACzC,QAAM,CAACC,UAAD,EAAYC,aAAZ,IAA2Bd,UAAU,CAACI,YAAD,EAAcF,YAAd,CAA3C;;AACA,QAAMa,YAAY,GAAEC,IAAD,IAAQ;AACvBF,IAAAA,aAAa,CAAC;AACVP,MAAAA,IAAI,EAAC,OADK;AAEVS,MAAAA,IAAI,EAACA;AAFK,KAAD,CAAb;AAIH,GALD,CAFyC,CAQzC;;;AACA,QAAMC,cAAc,GAAC;AACjBd,IAAAA,KAAK,EAACU,UAAU,CAACV,KADA;AAEjBe,IAAAA,OAAO,EAACH;AAFS,GAArB;AAIF,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEE,cAA9B;AAAA,cACKL,KAAK,CAACO;AADX;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAlBuBR,a;;KAAAA,a","sourcesContent":["import {React,useReducer} from 'react'\r\nimport AnimeContext from './context'\r\nconst defaultState={\r\n    items:{\r\n  \r\n    }\r\n}\r\nconst animeReducer=(state,action)=>{\r\n    if(action.type==='Watch'){\r\n        console.log(state.items.anime)\r\n        // const findAnimeIndex=state.items.findIndex((item)=>item.id===action.item.id)\r\n        // const findAnime=state.items[findAnimeIndex];\r\n        // let updatedAnime;\r\n        // if(findAnime){\r\n        //     let sameAnimes={...findAnime};\r\n        //     updatedAnime=[...state.items];\r\n        //     updatedAnime[findAnimeIndex]=sameAnimes;\r\n        // }\r\n        // else{\r\n        //     updatedAnime=state.items.concat(action.item)\r\n        // }\r\n        // return{\r\n        //     items:updatedAnime\r\n        // }\r\n        // console.log(action.item.name)\r\n    }\r\n    return defaultState;\r\n}\r\nexport default function AnimeProvider(props) {\r\n    const [animeState,dispatchAnime]=useReducer(animeReducer,defaultState)\r\n    const watchHandler=(item)=>{\r\n        dispatchAnime({\r\n            type:'Watch',\r\n            item:item\r\n        })\r\n    }\r\n    // console.log(animeState.items)\r\n    const MyAnimeContext={\r\n        items:animeState.items,\r\n        addItem:watchHandler\r\n    }\r\n  return (\r\n    <AnimeContext.Provider value={MyAnimeContext}>\r\n        {props.children}\r\n    </AnimeContext.Provider>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}